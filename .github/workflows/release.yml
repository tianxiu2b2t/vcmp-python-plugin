name: Build and Upload DLL & Create tagged release and publish to PyPI

on:
  push:
    tags:
      - v*
  workflow_dispatch:

jobs:
  build_and_upload:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [windows-latest, ubuntu-latest]
        arch: ['x64']
        python-version: ['3.10', '3.11', '3.12', '3.13']

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}

      - name: Install CMake
        uses: ssrobins/install-cmake@v1
        with:
          version: 4.0.1

      - name: Clone Dependencies
        run: |
          git clone https://github.com/pybind/pybind11.git

      - name: Configure CMake (Windows)
        if: runner.os == 'Windows'
        run: |
          if [ "$ARCH" = "x64" ]; then
            cmake -G "Visual Studio 17 2022" -A x64 -S . -B build -DCMAKE_BUILD_TYPE=Release
          else
            cmake -G "Visual Studio 17 2022" -A Win32 -S . -B build -DCMAKE_BUILD_TYPE=Release
          fi
        shell: bash
        env:
          ARCH: ${{ matrix.arch }}

      - name: Configure CMake (Linux)
        if: runner.os == 'Linux'
        run: cmake -S . -B build -DCMAKE_BUILD_TYPE=Release

      - name: Build with CMake
        run: cmake --build build --config Release

      - name: Move DLLs to build (Windows)
        if: runner.os == 'Windows'
        run: |
          mv build/Release/*.dll build/

      - name: Upload Artifact
        uses: actions/upload-artifact@v4
        with:
          name: DLLs_${{ matrix.os }}_${{ matrix.arch }}_${{ matrix.python-version }}
          path: |
            build/*.dll
            build/*.so

      - name: Save Artifact Names
        run: echo "artifact_name=DLLs_${{ matrix.os }}_${{ matrix.arch }}_${{ matrix.python-version }}" >> $GITHUB_ENV

  release_and_publish:
    # 发布到 GitHub Release 和 PyPI
    runs-on: ubuntu-latest
    needs: build_and_upload

    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set env
        run: |
          echo "RELEASE_VERSION=${GITHUB_REF#refs/*/}" >> $GITHUB_ENV

      - name: List Artifacts
        run: |
          echo "Artifacts available: ${{ needs.build_and_upload.outputs.artifact_name }}"
  
      - name: Download DLL Artifacts
        uses: actions/download-artifact@v4
        with:
          name: ${{ needs.build_and_upload.outputs.artifact_name }} # 动态获取工件名称
          path: ./libraries

      - name: List Artifacts after download
        run: ls -a ./libraries

      - uses: actions/setup-node@v3
        with:
          node-version: 16.x

      - name: Create release
        run: npx changelogithub-chinese
        env:
          GITHUB_TOKEN: ${{ secrets.RELEASE_TOKEN }}

      - name: Set up Python for PyPI
        uses: actions/setup-python@v4
        with:
          python-version: 3.12

      - name: Install dependencies for PyPI
        run: |
          python -m pip install --upgrade pip
          pip install setuptools wheel twine

      - name: Build and publish package to PyPI
        run: |
          python setup.py sdist bdist_wheel
          twine upload dist/*
        env:
          TWINE_USERNAME: __token__
          TWINE_PASSWORD: ${{ secrets.PYPI_TOKEN }}

      - name: Upload DLL to Release
        uses: softprops/action-gh-release@v1
        with:
          files: ./libraries/*
        env:
          GITHUB_TOKEN: ${{ secrets.RELEASE_TOKEN }}