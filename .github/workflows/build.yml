name: Build and Upload DLL

on:
  push:
    branches:
      - main
  workflow_dispatch:

jobs:
  build_and_upload:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [windows-latest, ubuntu-latest]
        arch: ['x64']
        python-version: ['3.10', '3.11', '3.12', '3.13']
        glibc-version: ['2.31', '2.33', '2.35'] # 添加 glibc 版本支持
        gcc-version: ['10', '11', '12']         # 添加 gcc/glibcxx 版本支持

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}

      - name: Install CMake
        uses: ssrobins/install-cmake@v1
        with:
          version: 4.0.1

      - name: Clone Dependencies
        run: |
          git clone https://github.com/pybind/pybind11.git

      - name: Install Specific GCC and glibc (Linux)
        if: runner.os == 'Linux'
        run: |
          sudo apt-get update
          sudo apt-get install -y software-properties-common
          
          # 安装指定版本的 GCC
          sudo add-apt-repository ppa:ubuntu-toolchain-r/test -y
          sudo apt-get update && sudo apt-get install -y gcc-${{ matrix.gcc-version }} g++-${{ matrix.gcc-version }}
          sudo update-alternatives --install /usr/bin/gcc gcc /usr/bin/gcc-${{ matrix.gcc-version }} 100
          sudo update-alternatives --install /usr/bin/g++ g++ /usr/bin/g++-${{ matrix.gcc-version }} 100
          
          # 安装指定版本的 glibc
          wget http://ftp.gnu.org/gnu/libc/glibc-${{ matrix.glibc-version }}.tar.gz
          tar -xvzf glibc-${{ matrix.glibc-version }}.tar.gz
          cd glibc-${{ matrix.glibc-version }}
          mkdir build && cd build
          ../configure --prefix=/opt/glibc-${{ matrix.glibc-version }}
          make -j$(nproc)
          sudo make install
          
          # 设置运行时路径
          sudo ldconfig /opt/glibc-${{ matrix.glibc-version }}/lib
          export LD_LIBRARY_PATH=/opt/glibc-${{ matrix.glibc-version }}/lib:$LD_LIBRARY_PATH

      - name: Configure CMake (Windows)
        if: runner.os == 'Windows'
        run: |
          if [ "$ARCH" = "x64" ]; then
            cmake -G "Visual Studio 17 2022" -A x64 -S . -B build -DCMAKE_BUILD_TYPE=Release
          else
            cmake -G "Visual Studio 17 2022" -A Win32 -S . -B build -DCMAKE_BUILD_TYPE=Release
          fi
        shell: bash
        env:
          ARCH: ${{ matrix.arch }}

      - name: Configure CMake (Linux)
        if: runner.os == 'Linux'
        run: |
          cmake -S . -B build -DCMAKE_BUILD_TYPE=Release \
            -DCMAKE_C_COMPILER=gcc -DCMAKE_CXX_COMPILER=g++ \
            -DCMAKE_C_FLAGS="-Wl,--rpath=/opt/glibc-${{ matrix.glibc-version }}/lib -L/opt/glibc-${{ matrix.glibc-version }}/lib" \
            -DCMAKE_CXX_FLAGS="-Wl,--rpath=/opt/glibc-${{ matrix.glibc-version }}/lib -L/opt/glibc-${{ matrix.glibc-version }}/lib"

      - name: Build with CMake
        run: cmake --build build --config Release

      - name: Move DLLs to build (Windows)
        if: runner.os == 'Windows'
        run: |
          mv build/Release/*.dll build/

      - name: Upload Artifact
        uses: actions/upload-artifact@v4
        with:
          name: DLLs_${{ matrix.os }}_${{ matrix.arch }}_${{ matrix.python-version }}_glibc${{ matrix.glibc-version }}_gcc${{ matrix.gcc-version }}
          path: |
            build/*.dll
            build/*.so

      - name: Save Artifact Names
        run: echo "artifact_name=DLLs_${{ matrix.os }}_${{ matrix.arch }}_${{ matrix.python-version }}_glibc${{ matrix.glibc-version }}_gcc${{ matrix.gcc-version }}" >> $GITHUB_ENV