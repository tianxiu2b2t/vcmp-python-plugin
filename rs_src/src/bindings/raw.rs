/* automatically generated by rust-bindgen 0.71.1 */

pub const PLUGIN_API_MAJOR: u32 = 2;
pub const PLUGIN_API_MINOR: u32 = 0;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ServerSettings {
    pub structSize: u32,
    pub serverName: [::std::os::raw::c_char; 128usize],
    pub maxPlayers: u32,
    pub port: u32,
    pub flags: u32,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct PluginInfo {
    pub structSize: u32,
    pub pluginId: u32,
    pub name: [::std::os::raw::c_char; 32usize],
    pub pluginVersion: u32,
    pub apiMajorVersion: u16,
    pub apiMinorVersion: u16,
}
pub const vcmpError_vcmpErrorNone: vcmpError = 0;
pub const vcmpError_vcmpErrorNoSuchEntity: vcmpError = 1;
pub const vcmpError_vcmpErrorBufferTooSmall: vcmpError = 2;
pub const vcmpError_vcmpErrorTooLargeInput: vcmpError = 3;
pub const vcmpError_vcmpErrorArgumentOutOfBounds: vcmpError = 4;
pub const vcmpError_vcmpErrorNullArgument: vcmpError = 5;
pub const vcmpError_vcmpErrorPoolExhausted: vcmpError = 6;
pub const vcmpError_vcmpErrorInvalidName: vcmpError = 7;
pub const vcmpError_vcmpErrorRequestDenied: vcmpError = 8;
pub const vcmpError_forceSizeVcmpError: vcmpError = 2147483647;
pub type vcmpError = ::std::os::raw::c_int;
pub const vcmpEntityPool_vcmpEntityPoolVehicle: vcmpEntityPool = 1;
pub const vcmpEntityPool_vcmpEntityPoolObject: vcmpEntityPool = 2;
pub const vcmpEntityPool_vcmpEntityPoolPickup: vcmpEntityPool = 3;
pub const vcmpEntityPool_vcmpEntityPoolRadio: vcmpEntityPool = 4;
pub const vcmpEntityPool_vcmpEntityPoolBlip: vcmpEntityPool = 7;
pub const vcmpEntityPool_vcmpEntityPoolCheckPoint: vcmpEntityPool = 8;
pub const vcmpEntityPool_forceSizeVcmpEntityPool: vcmpEntityPool = 2147483647;
pub type vcmpEntityPool = ::std::os::raw::c_int;
pub const vcmpDisconnectReason_vcmpDisconnectReasonTimeout: vcmpDisconnectReason = 0;
pub const vcmpDisconnectReason_vcmpDisconnectReasonQuit: vcmpDisconnectReason = 1;
pub const vcmpDisconnectReason_vcmpDisconnectReasonKick: vcmpDisconnectReason = 2;
pub const vcmpDisconnectReason_vcmpDisconnectReasonCrash: vcmpDisconnectReason = 3;
pub const vcmpDisconnectReason_vcmpDisconnectReasonAntiCheat: vcmpDisconnectReason = 4;
pub const vcmpDisconnectReason_forceSizeVcmpDisconnectReason: vcmpDisconnectReason = 2147483647;
pub type vcmpDisconnectReason = ::std::os::raw::c_int;
pub const vcmpBodyPart_vcmpBodyPartBody: vcmpBodyPart = 0;
pub const vcmpBodyPart_vcmpBodyPartTorso: vcmpBodyPart = 1;
pub const vcmpBodyPart_vcmpBodyPartLeftArm: vcmpBodyPart = 2;
pub const vcmpBodyPart_vcmpBodyPartRightArm: vcmpBodyPart = 3;
pub const vcmpBodyPart_vcmpBodyPartLeftLeg: vcmpBodyPart = 4;
pub const vcmpBodyPart_vcmpBodyPartRightLeg: vcmpBodyPart = 5;
pub const vcmpBodyPart_vcmpBodyPartHead: vcmpBodyPart = 6;
pub const vcmpBodyPart_vcmpBodyPartInVehicle: vcmpBodyPart = 7;
pub const vcmpBodyPart_forceSizeVcmpBodyPart: vcmpBodyPart = 2147483647;
pub type vcmpBodyPart = ::std::os::raw::c_int;
pub const vcmpPlayerState_vcmpPlayerStateNone: vcmpPlayerState = 0;
pub const vcmpPlayerState_vcmpPlayerStateNormal: vcmpPlayerState = 1;
pub const vcmpPlayerState_vcmpPlayerStateAim: vcmpPlayerState = 2;
pub const vcmpPlayerState_vcmpPlayerStateDriver: vcmpPlayerState = 3;
pub const vcmpPlayerState_vcmpPlayerStatePassenger: vcmpPlayerState = 4;
pub const vcmpPlayerState_vcmpPlayerStateEnterDriver: vcmpPlayerState = 5;
pub const vcmpPlayerState_vcmpPlayerStateEnterPassenger: vcmpPlayerState = 6;
pub const vcmpPlayerState_vcmpPlayerStateExit: vcmpPlayerState = 7;
pub const vcmpPlayerState_vcmpPlayerStateUnspawned: vcmpPlayerState = 8;
pub const vcmpPlayerState_forceSizeVcmpPlayerState: vcmpPlayerState = 2147483647;
pub type vcmpPlayerState = ::std::os::raw::c_int;
pub const vcmpPlayerUpdate_vcmpPlayerUpdateNormal: vcmpPlayerUpdate = 0;
pub const vcmpPlayerUpdate_vcmpPlayerUpdateAiming: vcmpPlayerUpdate = 1;
pub const vcmpPlayerUpdate_vcmpPlayerUpdateDriver: vcmpPlayerUpdate = 2;
pub const vcmpPlayerUpdate_vcmpPlayerUpdatePassenger: vcmpPlayerUpdate = 3;
pub const vcmpPlayerUpdate_forceSizeVcmpPlayerUpdate: vcmpPlayerUpdate = 2147483647;
pub type vcmpPlayerUpdate = ::std::os::raw::c_int;
pub const vcmpPlayerVehicle_vcmpPlayerVehicleOut: vcmpPlayerVehicle = 0;
pub const vcmpPlayerVehicle_vcmpPlayerVehicleEntering: vcmpPlayerVehicle = 1;
pub const vcmpPlayerVehicle_vcmpPlayerVehicleExiting: vcmpPlayerVehicle = 2;
pub const vcmpPlayerVehicle_vcmpPlayerVehicleIn: vcmpPlayerVehicle = 3;
pub const vcmpPlayerVehicle_forceSizeVcmpPlayerVehicle: vcmpPlayerVehicle = 2147483647;
pub type vcmpPlayerVehicle = ::std::os::raw::c_int;
pub const vcmpVehicleSync_vcmpVehicleSyncNone: vcmpVehicleSync = 0;
pub const vcmpVehicleSync_vcmpVehicleSyncDriver: vcmpVehicleSync = 1;
pub const vcmpVehicleSync_vcmpVehicleSyncPassenger: vcmpVehicleSync = 3;
pub const vcmpVehicleSync_vcmpVehicleSyncNear: vcmpVehicleSync = 4;
pub const vcmpVehicleSync_forceSizeVcmpVehicleSync: vcmpVehicleSync = 2147483647;
pub type vcmpVehicleSync = ::std::os::raw::c_int;
pub const vcmpVehicleUpdate_vcmpVehicleUpdateDriverSync: vcmpVehicleUpdate = 0;
pub const vcmpVehicleUpdate_vcmpVehicleUpdateOtherSync: vcmpVehicleUpdate = 1;
pub const vcmpVehicleUpdate_vcmpVehicleUpdatePosition: vcmpVehicleUpdate = 2;
pub const vcmpVehicleUpdate_vcmpVehicleUpdateHealth: vcmpVehicleUpdate = 4;
pub const vcmpVehicleUpdate_vcmpVehicleUpdateColour: vcmpVehicleUpdate = 5;
pub const vcmpVehicleUpdate_vcmpVehicleUpdateRotation: vcmpVehicleUpdate = 6;
pub const vcmpVehicleUpdate_forceSizeVcmpVehicleUpdate: vcmpVehicleUpdate = 2147483647;
pub type vcmpVehicleUpdate = ::std::os::raw::c_int;
pub const vcmpServerOption_vcmpServerOptionSyncFrameLimiter: vcmpServerOption = 0;
pub const vcmpServerOption_vcmpServerOptionFrameLimiter: vcmpServerOption = 1;
pub const vcmpServerOption_vcmpServerOptionTaxiBoostJump: vcmpServerOption = 2;
pub const vcmpServerOption_vcmpServerOptionDriveOnWater: vcmpServerOption = 3;
pub const vcmpServerOption_vcmpServerOptionFastSwitch: vcmpServerOption = 4;
pub const vcmpServerOption_vcmpServerOptionFriendlyFire: vcmpServerOption = 5;
pub const vcmpServerOption_vcmpServerOptionDisableDriveBy: vcmpServerOption = 6;
pub const vcmpServerOption_vcmpServerOptionPerfectHandling: vcmpServerOption = 7;
pub const vcmpServerOption_vcmpServerOptionFlyingCars: vcmpServerOption = 8;
pub const vcmpServerOption_vcmpServerOptionJumpSwitch: vcmpServerOption = 9;
pub const vcmpServerOption_vcmpServerOptionShowMarkers: vcmpServerOption = 10;
pub const vcmpServerOption_vcmpServerOptionOnlyShowTeamMarkers: vcmpServerOption = 11;
pub const vcmpServerOption_vcmpServerOptionStuntBike: vcmpServerOption = 12;
pub const vcmpServerOption_vcmpServerOptionShootInAir: vcmpServerOption = 13;
pub const vcmpServerOption_vcmpServerOptionShowNameTags: vcmpServerOption = 14;
pub const vcmpServerOption_vcmpServerOptionJoinMessages: vcmpServerOption = 15;
pub const vcmpServerOption_vcmpServerOptionDeathMessages: vcmpServerOption = 16;
pub const vcmpServerOption_vcmpServerOptionChatTagsEnabled: vcmpServerOption = 17;
pub const vcmpServerOption_vcmpServerOptionUseClasses: vcmpServerOption = 18;
pub const vcmpServerOption_vcmpServerOptionWallGlitch: vcmpServerOption = 19;
pub const vcmpServerOption_vcmpServerOptionDisableBackfaceCulling: vcmpServerOption = 20;
pub const vcmpServerOption_vcmpServerOptionDisableHeliBladeDamage: vcmpServerOption = 21;
pub const vcmpServerOption_vcmpServerOptionDisableCrouch: vcmpServerOption = 22;
pub const vcmpServerOption_forceSizeVcmpServerOption: vcmpServerOption = 2147483647;
pub type vcmpServerOption = ::std::os::raw::c_int;
pub const vcmpPlayerOption_vcmpPlayerOptionControllable: vcmpPlayerOption = 0;
pub const vcmpPlayerOption_vcmpPlayerOptionDriveBy: vcmpPlayerOption = 1;
pub const vcmpPlayerOption_vcmpPlayerOptionWhiteScanlines: vcmpPlayerOption = 2;
pub const vcmpPlayerOption_vcmpPlayerOptionGreenScanlines: vcmpPlayerOption = 3;
pub const vcmpPlayerOption_vcmpPlayerOptionWidescreen: vcmpPlayerOption = 4;
pub const vcmpPlayerOption_vcmpPlayerOptionShowMarkers: vcmpPlayerOption = 5;
pub const vcmpPlayerOption_vcmpPlayerOptionCanAttack: vcmpPlayerOption = 6;
pub const vcmpPlayerOption_vcmpPlayerOptionHasMarker: vcmpPlayerOption = 7;
pub const vcmpPlayerOption_vcmpPlayerOptionChatTagsEnabled: vcmpPlayerOption = 8;
pub const vcmpPlayerOption_vcmpPlayerOptionDrunkEffectsDeprecated: vcmpPlayerOption = 9;
pub const vcmpPlayerOption_vcmpPlayerOptionBleeding: vcmpPlayerOption = 10;
pub const vcmpPlayerOption_forceSizeVcmpPlayerOption: vcmpPlayerOption = 2147483647;
pub type vcmpPlayerOption = ::std::os::raw::c_int;
pub const vcmpVehicleOption_vcmpVehicleOptionDoorsLocked: vcmpVehicleOption = 0;
pub const vcmpVehicleOption_vcmpVehicleOptionAlarm: vcmpVehicleOption = 1;
pub const vcmpVehicleOption_vcmpVehicleOptionLights: vcmpVehicleOption = 2;
pub const vcmpVehicleOption_vcmpVehicleOptionRadioLocked: vcmpVehicleOption = 3;
pub const vcmpVehicleOption_vcmpVehicleOptionGhost: vcmpVehicleOption = 4;
pub const vcmpVehicleOption_vcmpVehicleOptionSiren: vcmpVehicleOption = 5;
pub const vcmpVehicleOption_vcmpVehicleOptionSingleUse: vcmpVehicleOption = 6;
pub const vcmpVehicleOption_vcmpVehicleOptionEngineDisabled: vcmpVehicleOption = 7;
pub const vcmpVehicleOption_vcmpVehicleOptionBootOpen: vcmpVehicleOption = 8;
pub const vcmpVehicleOption_vcmpVehicleOptionBonnetOpen: vcmpVehicleOption = 9;
pub const vcmpVehicleOption_forceSizeVcmpVehicleOption: vcmpVehicleOption = 2147483647;
pub type vcmpVehicleOption = ::std::os::raw::c_int;
pub const vcmpPickupOption_vcmpPickupOptionSingleUse: vcmpPickupOption = 0;
pub const vcmpPickupOption_forceSizeVcmpPickupOption: vcmpPickupOption = 2147483647;
pub type vcmpPickupOption = ::std::os::raw::c_int;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct PluginFuncs {
    pub structSize: u32,
    #[doc = " Plugin system"]
    pub GetServerVersion: ::std::option::Option<unsafe extern "C" fn() -> u32>,
    pub GetServerSettings:
        ::std::option::Option<unsafe extern "C" fn(settings: *mut ServerSettings) -> vcmpError>,
    pub ExportFunctions: ::std::option::Option<
        unsafe extern "C" fn(
            pluginId: i32,
            functionList: *mut *const ::std::os::raw::c_void,
            size: usize,
        ) -> vcmpError,
    >,
    pub GetNumberOfPlugins: ::std::option::Option<unsafe extern "C" fn() -> u32>,
    pub GetPluginInfo: ::std::option::Option<
        unsafe extern "C" fn(pluginId: i32, pluginInfo: *mut PluginInfo) -> vcmpError,
    >,
    pub FindPlugin: ::std::option::Option<
        unsafe extern "C" fn(pluginName: *const ::std::os::raw::c_char) -> i32,
    >,
    pub GetPluginExports: ::std::option::Option<
        unsafe extern "C" fn(
            pluginId: i32,
            exportCount: *mut usize,
        ) -> *mut *const ::std::os::raw::c_void,
    >,
    pub SendPluginCommand: ::std::option::Option<
        unsafe extern "C" fn(
            commandIdentifier: u32,
            format: *const ::std::os::raw::c_char,
            ...
        ) -> vcmpError,
    >,
    pub GetTime: ::std::option::Option<unsafe extern "C" fn() -> u64>,
    pub LogMessage: ::std::option::Option<
        unsafe extern "C" fn(format: *const ::std::os::raw::c_char, ...) -> vcmpError,
    >,
    pub GetLastError: ::std::option::Option<unsafe extern "C" fn() -> vcmpError>,
    #[doc = " Client messages"]
    pub SendClientScriptData: ::std::option::Option<
        unsafe extern "C" fn(
            playerId: i32,
            data: *const ::std::os::raw::c_void,
            size: usize,
        ) -> vcmpError,
    >,
    pub SendClientMessage: ::std::option::Option<
        unsafe extern "C" fn(
            playerId: i32,
            colour: u32,
            format: *const ::std::os::raw::c_char,
            ...
        ) -> vcmpError,
    >,
    pub SendGameMessage: ::std::option::Option<
        unsafe extern "C" fn(
            playerId: i32,
            type_: i32,
            format: *const ::std::os::raw::c_char,
            ...
        ) -> vcmpError,
    >,
    pub SetServerName: ::std::option::Option<
        unsafe extern "C" fn(text: *const ::std::os::raw::c_char) -> vcmpError,
    >,
    pub GetServerName: ::std::option::Option<
        unsafe extern "C" fn(buffer: *mut ::std::os::raw::c_char, size: usize) -> vcmpError,
    >,
    pub SetMaxPlayers: ::std::option::Option<unsafe extern "C" fn(maxPlayers: u32) -> vcmpError>,
    pub GetMaxPlayers: ::std::option::Option<unsafe extern "C" fn() -> u32>,
    pub SetServerPassword: ::std::option::Option<
        unsafe extern "C" fn(password: *const ::std::os::raw::c_char) -> vcmpError,
    >,
    pub GetServerPassword: ::std::option::Option<
        unsafe extern "C" fn(buffer: *mut ::std::os::raw::c_char, size: usize) -> vcmpError,
    >,
    pub SetGameModeText: ::std::option::Option<
        unsafe extern "C" fn(gameMode: *const ::std::os::raw::c_char) -> vcmpError,
    >,
    pub GetGameModeText: ::std::option::Option<
        unsafe extern "C" fn(buffer: *mut ::std::os::raw::c_char, size: usize) -> vcmpError,
    >,
    pub ShutdownServer: ::std::option::Option<unsafe extern "C" fn()>,
    pub SetServerOption: ::std::option::Option<
        unsafe extern "C" fn(option: vcmpServerOption, toggle: u8) -> vcmpError,
    >,
    pub GetServerOption:
        ::std::option::Option<unsafe extern "C" fn(option: vcmpServerOption) -> u8>,
    pub SetWorldBounds:
        ::std::option::Option<unsafe extern "C" fn(maxX: f32, minX: f32, maxY: f32, minY: f32)>,
    pub GetWorldBounds: ::std::option::Option<
        unsafe extern "C" fn(
            maxXOut: *mut f32,
            minXOut: *mut f32,
            maxYOut: *mut f32,
            minYOut: *mut f32,
        ),
    >,
    pub SetWastedSettings: ::std::option::Option<
        unsafe extern "C" fn(
            deathTimer: u32,
            fadeTimer: u32,
            fadeInSpeed: f32,
            fadeOutSpeed: f32,
            fadeColour: u32,
            corpseFadeStart: u32,
            corpseFadeTime: u32,
        ),
    >,
    pub GetWastedSettings: ::std::option::Option<
        unsafe extern "C" fn(
            deathTimerOut: *mut u32,
            fadeTimerOut: *mut u32,
            fadeInSpeedOut: *mut f32,
            fadeOutSpeedOut: *mut f32,
            fadeColourOut: *mut u32,
            corpseFadeStartOut: *mut u32,
            corpseFadeTimeOut: *mut u32,
        ),
    >,
    pub SetTimeRate: ::std::option::Option<unsafe extern "C" fn(timeRate: i32)>,
    pub GetTimeRate: ::std::option::Option<unsafe extern "C" fn() -> i32>,
    pub SetHour: ::std::option::Option<unsafe extern "C" fn(hour: i32)>,
    pub GetHour: ::std::option::Option<unsafe extern "C" fn() -> i32>,
    pub SetMinute: ::std::option::Option<unsafe extern "C" fn(minute: i32)>,
    pub GetMinute: ::std::option::Option<unsafe extern "C" fn() -> i32>,
    pub SetWeather: ::std::option::Option<unsafe extern "C" fn(weather: i32)>,
    pub GetWeather: ::std::option::Option<unsafe extern "C" fn() -> i32>,
    pub SetGravity: ::std::option::Option<unsafe extern "C" fn(gravity: f32)>,
    pub GetGravity: ::std::option::Option<unsafe extern "C" fn() -> f32>,
    pub SetGameSpeed: ::std::option::Option<unsafe extern "C" fn(gameSpeed: f32)>,
    pub GetGameSpeed: ::std::option::Option<unsafe extern "C" fn() -> f32>,
    pub SetWaterLevel: ::std::option::Option<unsafe extern "C" fn(waterLevel: f32)>,
    pub GetWaterLevel: ::std::option::Option<unsafe extern "C" fn() -> f32>,
    pub SetMaximumFlightAltitude: ::std::option::Option<unsafe extern "C" fn(height: f32)>,
    pub GetMaximumFlightAltitude: ::std::option::Option<unsafe extern "C" fn() -> f32>,
    pub SetKillCommandDelay: ::std::option::Option<unsafe extern "C" fn(delay: i32)>,
    pub GetKillCommandDelay: ::std::option::Option<unsafe extern "C" fn() -> i32>,
    pub SetVehiclesForcedRespawnHeight: ::std::option::Option<unsafe extern "C" fn(height: f32)>,
    pub GetVehiclesForcedRespawnHeight: ::std::option::Option<unsafe extern "C" fn() -> f32>,
    pub CreateExplosion: ::std::option::Option<
        unsafe extern "C" fn(
            worldId: i32,
            type_: i32,
            x: f32,
            y: f32,
            z: f32,
            responsiblePlayerId: i32,
            atGroundLevel: u8,
        ) -> vcmpError,
    >,
    pub PlaySound: ::std::option::Option<
        unsafe extern "C" fn(worldId: i32, soundId: i32, x: f32, y: f32, z: f32) -> vcmpError,
    >,
    pub HideMapObject: ::std::option::Option<
        unsafe extern "C" fn(modelId: i32, tenthX: i16, tenthY: i16, tenthZ: i16),
    >,
    pub ShowMapObject: ::std::option::Option<
        unsafe extern "C" fn(modelId: i32, tenthX: i16, tenthY: i16, tenthZ: i16),
    >,
    pub ShowAllMapObjects: ::std::option::Option<unsafe extern "C" fn()>,
    pub SetWeaponDataValue: ::std::option::Option<
        unsafe extern "C" fn(weaponId: i32, fieldId: i32, value: f64) -> vcmpError,
    >,
    pub GetWeaponDataValue:
        ::std::option::Option<unsafe extern "C" fn(weaponId: i32, fieldId: i32) -> f64>,
    pub ResetWeaponDataValue:
        ::std::option::Option<unsafe extern "C" fn(weaponId: i32, fieldId: i32) -> vcmpError>,
    pub IsWeaponDataValueModified:
        ::std::option::Option<unsafe extern "C" fn(weaponId: i32, fieldId: i32) -> u8>,
    pub ResetWeaponData: ::std::option::Option<unsafe extern "C" fn(weaponId: i32) -> vcmpError>,
    pub ResetAllWeaponData: ::std::option::Option<unsafe extern "C" fn()>,
    pub GetKeyBindUnusedSlot: ::std::option::Option<unsafe extern "C" fn() -> i32>,
    pub GetKeyBindData: ::std::option::Option<
        unsafe extern "C" fn(
            bindId: i32,
            isCalledOnReleaseOut: *mut u8,
            keyOneOut: *mut i32,
            keyTwoOut: *mut i32,
            keyThreeOut: *mut i32,
        ) -> vcmpError,
    >,
    pub RegisterKeyBind: ::std::option::Option<
        unsafe extern "C" fn(
            bindId: i32,
            isCalledOnRelease: u8,
            keyOne: i32,
            keyTwo: i32,
            keyThree: i32,
        ) -> vcmpError,
    >,
    pub RemoveKeyBind: ::std::option::Option<unsafe extern "C" fn(bindId: i32) -> vcmpError>,
    pub RemoveAllKeyBinds: ::std::option::Option<unsafe extern "C" fn()>,
    pub CreateCoordBlip: ::std::option::Option<
        unsafe extern "C" fn(
            index: i32,
            world: i32,
            x: f32,
            y: f32,
            z: f32,
            scale: i32,
            colour: u32,
            sprite: i32,
        ) -> i32,
    >,
    pub DestroyCoordBlip: ::std::option::Option<unsafe extern "C" fn(index: i32) -> vcmpError>,
    pub GetCoordBlipInfo: ::std::option::Option<
        unsafe extern "C" fn(
            index: i32,
            worldOut: *mut i32,
            xOut: *mut f32,
            yOUt: *mut f32,
            zOut: *mut f32,
            scaleOut: *mut i32,
            colourOut: *mut u32,
            spriteOut: *mut i32,
        ) -> vcmpError,
    >,
    pub AddRadioStream: ::std::option::Option<
        unsafe extern "C" fn(
            radioId: i32,
            radioName: *const ::std::os::raw::c_char,
            radioUrl: *const ::std::os::raw::c_char,
            isListed: u8,
        ) -> vcmpError,
    >,
    pub RemoveRadioStream: ::std::option::Option<unsafe extern "C" fn(radioId: i32) -> vcmpError>,
    pub AddPlayerClass: ::std::option::Option<
        unsafe extern "C" fn(
            teamId: i32,
            colour: u32,
            modelIndex: i32,
            x: f32,
            y: f32,
            z: f32,
            angle: f32,
            weaponOne: i32,
            weaponOneAmmo: i32,
            weaponTwo: i32,
            weaponTwoAmmo: i32,
            weaponThree: i32,
            weaponThreeAmmo: i32,
        ) -> i32,
    >,
    pub SetSpawnPlayerPosition: ::std::option::Option<unsafe extern "C" fn(x: f32, y: f32, z: f32)>,
    pub SetSpawnCameraPosition: ::std::option::Option<unsafe extern "C" fn(x: f32, y: f32, z: f32)>,
    pub SetSpawnCameraLookAt: ::std::option::Option<unsafe extern "C" fn(x: f32, y: f32, z: f32)>,
    pub IsPlayerAdmin: ::std::option::Option<unsafe extern "C" fn(playerId: i32) -> u8>,
    pub SetPlayerAdmin:
        ::std::option::Option<unsafe extern "C" fn(playerId: i32, toggle: u8) -> vcmpError>,
    pub GetPlayerIP: ::std::option::Option<
        unsafe extern "C" fn(
            playerId: i32,
            buffer: *mut ::std::os::raw::c_char,
            size: usize,
        ) -> vcmpError,
    >,
    pub GetPlayerUID: ::std::option::Option<
        unsafe extern "C" fn(
            playerId: i32,
            buffer: *mut ::std::os::raw::c_char,
            size: usize,
        ) -> vcmpError,
    >,
    pub GetPlayerUID2: ::std::option::Option<
        unsafe extern "C" fn(
            playerId: i32,
            buffer: *mut ::std::os::raw::c_char,
            size: usize,
        ) -> vcmpError,
    >,
    pub KickPlayer: ::std::option::Option<unsafe extern "C" fn(playerId: i32) -> vcmpError>,
    pub BanPlayer: ::std::option::Option<unsafe extern "C" fn(playerId: i32) -> vcmpError>,
    pub BanIP: ::std::option::Option<unsafe extern "C" fn(ipAddress: *mut ::std::os::raw::c_char)>,
    pub UnbanIP:
        ::std::option::Option<unsafe extern "C" fn(ipAddress: *mut ::std::os::raw::c_char) -> u8>,
    pub IsIPBanned:
        ::std::option::Option<unsafe extern "C" fn(ipAddress: *mut ::std::os::raw::c_char) -> u8>,
    pub GetPlayerIdFromName:
        ::std::option::Option<unsafe extern "C" fn(name: *const ::std::os::raw::c_char) -> i32>,
    pub IsPlayerConnected: ::std::option::Option<unsafe extern "C" fn(playerId: i32) -> u8>,
    pub IsPlayerStreamedForPlayer:
        ::std::option::Option<unsafe extern "C" fn(checkedPlayerId: i32, playerId: i32) -> u8>,
    pub GetPlayerKey: ::std::option::Option<unsafe extern "C" fn(playerId: i32) -> u32>,
    pub GetPlayerName: ::std::option::Option<
        unsafe extern "C" fn(
            playerId: i32,
            buffer: *mut ::std::os::raw::c_char,
            size: usize,
        ) -> vcmpError,
    >,
    pub SetPlayerName: ::std::option::Option<
        unsafe extern "C" fn(playerId: i32, name: *const ::std::os::raw::c_char) -> vcmpError,
    >,
    pub GetPlayerState:
        ::std::option::Option<unsafe extern "C" fn(playerId: i32) -> vcmpPlayerState>,
    pub SetPlayerOption: ::std::option::Option<
        unsafe extern "C" fn(playerId: i32, option: vcmpPlayerOption, toggle: u8) -> vcmpError,
    >,
    pub GetPlayerOption:
        ::std::option::Option<unsafe extern "C" fn(playerId: i32, option: vcmpPlayerOption) -> u8>,
    pub SetPlayerWorld:
        ::std::option::Option<unsafe extern "C" fn(playerId: i32, world: i32) -> vcmpError>,
    pub GetPlayerWorld: ::std::option::Option<unsafe extern "C" fn(playerId: i32) -> i32>,
    pub SetPlayerSecondaryWorld: ::std::option::Option<
        unsafe extern "C" fn(playerId: i32, secondaryWorld: i32) -> vcmpError,
    >,
    pub GetPlayerSecondaryWorld: ::std::option::Option<unsafe extern "C" fn(playerId: i32) -> i32>,
    pub GetPlayerUniqueWorld: ::std::option::Option<unsafe extern "C" fn(playerId: i32) -> i32>,
    pub IsPlayerWorldCompatible:
        ::std::option::Option<unsafe extern "C" fn(playerId: i32, world: i32) -> u8>,
    pub GetPlayerClass: ::std::option::Option<unsafe extern "C" fn(playerId: i32) -> i32>,
    pub SetPlayerTeam:
        ::std::option::Option<unsafe extern "C" fn(playerId: i32, teamId: i32) -> vcmpError>,
    pub GetPlayerTeam: ::std::option::Option<unsafe extern "C" fn(playerId: i32) -> i32>,
    pub SetPlayerSkin:
        ::std::option::Option<unsafe extern "C" fn(playerId: i32, skinId: i32) -> vcmpError>,
    pub GetPlayerSkin: ::std::option::Option<unsafe extern "C" fn(playerId: i32) -> i32>,
    pub SetPlayerColour:
        ::std::option::Option<unsafe extern "C" fn(playerId: i32, colour: u32) -> vcmpError>,
    pub GetPlayerColour: ::std::option::Option<unsafe extern "C" fn(playerId: i32) -> u32>,
    pub IsPlayerSpawned: ::std::option::Option<unsafe extern "C" fn(playerId: i32) -> u8>,
    pub ForcePlayerSpawn: ::std::option::Option<unsafe extern "C" fn(playerId: i32) -> vcmpError>,
    pub ForcePlayerSelect: ::std::option::Option<unsafe extern "C" fn(playerId: i32) -> vcmpError>,
    pub ForceAllSelect: ::std::option::Option<unsafe extern "C" fn()>,
    pub IsPlayerTyping: ::std::option::Option<unsafe extern "C" fn(playerId: i32) -> u8>,
    pub GivePlayerMoney:
        ::std::option::Option<unsafe extern "C" fn(playerId: i32, amount: i32) -> vcmpError>,
    pub SetPlayerMoney:
        ::std::option::Option<unsafe extern "C" fn(playerId: i32, amount: i32) -> vcmpError>,
    pub GetPlayerMoney: ::std::option::Option<unsafe extern "C" fn(playerId: i32) -> i32>,
    pub SetPlayerScore:
        ::std::option::Option<unsafe extern "C" fn(playerId: i32, score: i32) -> vcmpError>,
    pub GetPlayerScore: ::std::option::Option<unsafe extern "C" fn(playerId: i32) -> i32>,
    pub SetPlayerWantedLevel:
        ::std::option::Option<unsafe extern "C" fn(playerId: i32, level: i32) -> vcmpError>,
    pub GetPlayerWantedLevel: ::std::option::Option<unsafe extern "C" fn(playerId: i32) -> i32>,
    pub GetPlayerPing: ::std::option::Option<unsafe extern "C" fn(playerId: i32) -> i32>,
    pub GetPlayerFPS: ::std::option::Option<unsafe extern "C" fn(playerId: i32) -> f64>,
    pub SetPlayerHealth:
        ::std::option::Option<unsafe extern "C" fn(playerId: i32, health: f32) -> vcmpError>,
    pub GetPlayerHealth: ::std::option::Option<unsafe extern "C" fn(playerId: i32) -> f32>,
    pub SetPlayerArmour:
        ::std::option::Option<unsafe extern "C" fn(playerId: i32, armour: f32) -> vcmpError>,
    pub GetPlayerArmour: ::std::option::Option<unsafe extern "C" fn(playerId: i32) -> f32>,
    pub SetPlayerImmunityFlags:
        ::std::option::Option<unsafe extern "C" fn(playerId: i32, flags: u32) -> vcmpError>,
    pub GetPlayerImmunityFlags: ::std::option::Option<unsafe extern "C" fn(playerId: i32) -> u32>,
    pub SetPlayerPosition: ::std::option::Option<
        unsafe extern "C" fn(playerId: i32, x: f32, y: f32, z: f32) -> vcmpError,
    >,
    pub GetPlayerPosition: ::std::option::Option<
        unsafe extern "C" fn(
            playerId: i32,
            xOut: *mut f32,
            yOut: *mut f32,
            zOut: *mut f32,
        ) -> vcmpError,
    >,
    pub SetPlayerSpeed: ::std::option::Option<
        unsafe extern "C" fn(playerId: i32, x: f32, y: f32, z: f32) -> vcmpError,
    >,
    pub GetPlayerSpeed: ::std::option::Option<
        unsafe extern "C" fn(
            playerId: i32,
            xOut: *mut f32,
            yOut: *mut f32,
            zOut: *mut f32,
        ) -> vcmpError,
    >,
    pub AddPlayerSpeed: ::std::option::Option<
        unsafe extern "C" fn(playerId: i32, x: f32, y: f32, z: f32) -> vcmpError,
    >,
    pub SetPlayerHeading:
        ::std::option::Option<unsafe extern "C" fn(playerId: i32, angle: f32) -> vcmpError>,
    pub GetPlayerHeading: ::std::option::Option<unsafe extern "C" fn(playerId: i32) -> f32>,
    pub SetPlayerAlpha: ::std::option::Option<
        unsafe extern "C" fn(playerId: i32, alpha: i32, fadeTime: u32) -> vcmpError,
    >,
    pub GetPlayerAlpha: ::std::option::Option<unsafe extern "C" fn(playerId: i32) -> i32>,
    pub GetPlayerAimPosition: ::std::option::Option<
        unsafe extern "C" fn(
            playerId: i32,
            xOut: *mut f32,
            yOut: *mut f32,
            zOut: *mut f32,
        ) -> vcmpError,
    >,
    pub GetPlayerAimDirection: ::std::option::Option<
        unsafe extern "C" fn(
            playerId: i32,
            xOut: *mut f32,
            yOut: *mut f32,
            zOut: *mut f32,
        ) -> vcmpError,
    >,
    pub IsPlayerOnFire: ::std::option::Option<unsafe extern "C" fn(playerId: i32) -> u8>,
    pub IsPlayerCrouching: ::std::option::Option<unsafe extern "C" fn(playerId: i32) -> u8>,
    pub GetPlayerAction: ::std::option::Option<unsafe extern "C" fn(playerId: i32) -> i32>,
    pub GetPlayerGameKeys: ::std::option::Option<unsafe extern "C" fn(playerId: i32) -> u32>,
    pub PutPlayerInVehicle: ::std::option::Option<
        unsafe extern "C" fn(
            playerId: i32,
            vehicleId: i32,
            slotIndex: i32,
            makeRoom: u8,
            warp: u8,
        ) -> vcmpError,
    >,
    pub RemovePlayerFromVehicle:
        ::std::option::Option<unsafe extern "C" fn(playerId: i32) -> vcmpError>,
    pub GetPlayerInVehicleStatus:
        ::std::option::Option<unsafe extern "C" fn(playerId: i32) -> vcmpPlayerVehicle>,
    pub GetPlayerInVehicleSlot: ::std::option::Option<unsafe extern "C" fn(playerId: i32) -> i32>,
    pub GetPlayerVehicleId: ::std::option::Option<unsafe extern "C" fn(playerId: i32) -> i32>,
    pub GivePlayerWeapon: ::std::option::Option<
        unsafe extern "C" fn(playerId: i32, weaponId: i32, ammo: i32) -> vcmpError,
    >,
    pub SetPlayerWeapon: ::std::option::Option<
        unsafe extern "C" fn(playerId: i32, weaponId: i32, ammo: i32) -> vcmpError,
    >,
    pub GetPlayerWeapon: ::std::option::Option<unsafe extern "C" fn(playerId: i32) -> i32>,
    pub GetPlayerWeaponAmmo: ::std::option::Option<unsafe extern "C" fn(playerId: i32) -> i32>,
    pub SetPlayerWeaponSlot:
        ::std::option::Option<unsafe extern "C" fn(playerId: i32, slot: i32) -> vcmpError>,
    pub GetPlayerWeaponSlot: ::std::option::Option<unsafe extern "C" fn(playerId: i32) -> i32>,
    pub GetPlayerWeaponAtSlot:
        ::std::option::Option<unsafe extern "C" fn(playerId: i32, slot: i32) -> i32>,
    pub GetPlayerAmmoAtSlot:
        ::std::option::Option<unsafe extern "C" fn(playerId: i32, slot: i32) -> i32>,
    pub RemovePlayerWeapon:
        ::std::option::Option<unsafe extern "C" fn(playerId: i32, weaponId: i32) -> vcmpError>,
    pub RemoveAllWeapons: ::std::option::Option<unsafe extern "C" fn(playerId: i32) -> vcmpError>,
    pub SetCameraPosition: ::std::option::Option<
        unsafe extern "C" fn(
            playerId: i32,
            posX: f32,
            posY: f32,
            posZ: f32,
            lookX: f32,
            lookY: f32,
            lookZ: f32,
        ) -> vcmpError,
    >,
    pub RestoreCamera: ::std::option::Option<unsafe extern "C" fn(playerId: i32) -> vcmpError>,
    pub IsCameraLocked: ::std::option::Option<unsafe extern "C" fn(playerId: i32) -> u8>,
    pub SetPlayerAnimation: ::std::option::Option<
        unsafe extern "C" fn(playerId: i32, groupId: i32, animationId: i32) -> vcmpError,
    >,
    pub GetPlayerStandingOnVehicle:
        ::std::option::Option<unsafe extern "C" fn(playerId: i32) -> i32>,
    pub GetPlayerStandingOnObject:
        ::std::option::Option<unsafe extern "C" fn(playerId: i32) -> i32>,
    pub IsPlayerAway: ::std::option::Option<unsafe extern "C" fn(playerId: i32) -> u8>,
    pub GetPlayerSpectateTarget: ::std::option::Option<unsafe extern "C" fn(playerId: i32) -> i32>,
    pub SetPlayerSpectateTarget:
        ::std::option::Option<unsafe extern "C" fn(playerId: i32, targetId: i32) -> vcmpError>,
    pub RedirectPlayerToServer: ::std::option::Option<
        unsafe extern "C" fn(
            playerId: i32,
            ip: *const ::std::os::raw::c_char,
            port: u32,
            nick: *const ::std::os::raw::c_char,
            serverPassword: *const ::std::os::raw::c_char,
            userPassword: *const ::std::os::raw::c_char,
        ) -> vcmpError,
    >,
    pub CheckEntityExists:
        ::std::option::Option<unsafe extern "C" fn(entityPool: vcmpEntityPool, index: i32) -> u8>,
    pub CreateVehicle: ::std::option::Option<
        unsafe extern "C" fn(
            modelIndex: i32,
            world: i32,
            x: f32,
            y: f32,
            z: f32,
            angle: f32,
            primaryColour: i32,
            secondaryColour: i32,
        ) -> i32,
    >,
    pub DeleteVehicle: ::std::option::Option<unsafe extern "C" fn(vehicleId: i32) -> vcmpError>,
    pub SetVehicleOption: ::std::option::Option<
        unsafe extern "C" fn(vehicleId: i32, option: vcmpVehicleOption, toggle: u8) -> vcmpError,
    >,
    pub GetVehicleOption: ::std::option::Option<
        unsafe extern "C" fn(vehicleId: i32, option: vcmpVehicleOption) -> u8,
    >,
    pub GetVehicleSyncSource: ::std::option::Option<unsafe extern "C" fn(vehicleId: i32) -> i32>,
    pub GetVehicleSyncType:
        ::std::option::Option<unsafe extern "C" fn(vehicleId: i32) -> vcmpVehicleSync>,
    pub IsVehicleStreamedForPlayer:
        ::std::option::Option<unsafe extern "C" fn(vehicleId: i32, playerId: i32) -> u8>,
    pub SetVehicleWorld:
        ::std::option::Option<unsafe extern "C" fn(vehicleId: i32, world: i32) -> vcmpError>,
    pub GetVehicleWorld: ::std::option::Option<unsafe extern "C" fn(vehicleId: i32) -> i32>,
    pub GetVehicleModel: ::std::option::Option<unsafe extern "C" fn(vehicleId: i32) -> i32>,
    pub GetVehicleOccupant:
        ::std::option::Option<unsafe extern "C" fn(vehicleId: i32, slotIndex: i32) -> i32>,
    pub RespawnVehicle: ::std::option::Option<unsafe extern "C" fn(vehicleId: i32) -> vcmpError>,
    pub SetVehicleImmunityFlags: ::std::option::Option<
        unsafe extern "C" fn(vehicleId: i32, immunityFlags: u32) -> vcmpError,
    >,
    pub GetVehicleImmunityFlags: ::std::option::Option<unsafe extern "C" fn(vehicleId: i32) -> u32>,
    pub ExplodeVehicle: ::std::option::Option<unsafe extern "C" fn(vehicleId: i32) -> vcmpError>,
    pub IsVehicleWrecked: ::std::option::Option<unsafe extern "C" fn(vehicleId: i32) -> u8>,
    pub SetVehiclePosition: ::std::option::Option<
        unsafe extern "C" fn(
            vehicleId: i32,
            x: f32,
            y: f32,
            z: f32,
            removeOccupants: u8,
        ) -> vcmpError,
    >,
    pub GetVehiclePosition: ::std::option::Option<
        unsafe extern "C" fn(
            vehicleId: i32,
            xOut: *mut f32,
            yOut: *mut f32,
            zOut: *mut f32,
        ) -> vcmpError,
    >,
    pub SetVehicleRotation: ::std::option::Option<
        unsafe extern "C" fn(vehicleId: i32, x: f32, y: f32, z: f32, w: f32) -> vcmpError,
    >,
    pub SetVehicleRotationEuler: ::std::option::Option<
        unsafe extern "C" fn(vehicleId: i32, x: f32, y: f32, z: f32) -> vcmpError,
    >,
    pub GetVehicleRotation: ::std::option::Option<
        unsafe extern "C" fn(
            vehicleId: i32,
            xOut: *mut f32,
            yOut: *mut f32,
            zOut: *mut f32,
            wOut: *mut f32,
        ) -> vcmpError,
    >,
    pub GetVehicleRotationEuler: ::std::option::Option<
        unsafe extern "C" fn(
            vehicleId: i32,
            xOut: *mut f32,
            yOut: *mut f32,
            zOut: *mut f32,
        ) -> vcmpError,
    >,
    pub SetVehicleSpeed: ::std::option::Option<
        unsafe extern "C" fn(
            vehicleId: i32,
            x: f32,
            y: f32,
            z: f32,
            add: u8,
            relative: u8,
        ) -> vcmpError,
    >,
    pub GetVehicleSpeed: ::std::option::Option<
        unsafe extern "C" fn(
            vehicleId: i32,
            xOut: *mut f32,
            yOut: *mut f32,
            zOut: *mut f32,
            relative: u8,
        ) -> vcmpError,
    >,
    pub SetVehicleTurnSpeed: ::std::option::Option<
        unsafe extern "C" fn(
            vehicleId: i32,
            x: f32,
            y: f32,
            z: f32,
            add: u8,
            relative: u8,
        ) -> vcmpError,
    >,
    pub GetVehicleTurnSpeed: ::std::option::Option<
        unsafe extern "C" fn(
            vehicleId: i32,
            xOut: *mut f32,
            yOut: *mut f32,
            zOut: *mut f32,
            relative: u8,
        ) -> vcmpError,
    >,
    pub SetVehicleSpawnPosition: ::std::option::Option<
        unsafe extern "C" fn(vehicleId: i32, x: f32, y: f32, z: f32) -> vcmpError,
    >,
    pub GetVehicleSpawnPosition: ::std::option::Option<
        unsafe extern "C" fn(
            vehicleId: i32,
            xOut: *mut f32,
            yOut: *mut f32,
            zOut: *mut f32,
        ) -> vcmpError,
    >,
    pub SetVehicleSpawnRotation: ::std::option::Option<
        unsafe extern "C" fn(vehicleId: i32, x: f32, y: f32, z: f32, w: f32) -> vcmpError,
    >,
    pub SetVehicleSpawnRotationEuler: ::std::option::Option<
        unsafe extern "C" fn(vehicleId: i32, x: f32, y: f32, z: f32) -> vcmpError,
    >,
    pub GetVehicleSpawnRotation: ::std::option::Option<
        unsafe extern "C" fn(
            vehicleId: i32,
            xOut: *mut f32,
            yOut: *mut f32,
            zOut: *mut f32,
            wOut: *mut f32,
        ) -> vcmpError,
    >,
    pub GetVehicleSpawnRotationEuler: ::std::option::Option<
        unsafe extern "C" fn(
            vehicleId: i32,
            xOut: *mut f32,
            yOut: *mut f32,
            zOut: *mut f32,
        ) -> vcmpError,
    >,
    pub SetVehicleIdleRespawnTimer:
        ::std::option::Option<unsafe extern "C" fn(vehicleId: i32, millis: u32) -> vcmpError>,
    pub GetVehicleIdleRespawnTimer:
        ::std::option::Option<unsafe extern "C" fn(vehicleId: i32) -> u32>,
    pub SetVehicleHealth:
        ::std::option::Option<unsafe extern "C" fn(vehicleId: i32, health: f32) -> vcmpError>,
    pub GetVehicleHealth: ::std::option::Option<unsafe extern "C" fn(vehicleId: i32) -> f32>,
    pub SetVehicleColour: ::std::option::Option<
        unsafe extern "C" fn(vehicleId: i32, primaryColour: i32, secondaryColour: i32) -> vcmpError,
    >,
    pub GetVehicleColour: ::std::option::Option<
        unsafe extern "C" fn(
            vehicleId: i32,
            primaryColourOut: *mut i32,
            secondaryColourOut: *mut i32,
        ) -> vcmpError,
    >,
    pub SetVehiclePartStatus: ::std::option::Option<
        unsafe extern "C" fn(vehicleId: i32, partId: i32, status: i32) -> vcmpError,
    >,
    pub GetVehiclePartStatus:
        ::std::option::Option<unsafe extern "C" fn(vehicleId: i32, partId: i32) -> i32>,
    pub SetVehicleTyreStatus: ::std::option::Option<
        unsafe extern "C" fn(vehicleId: i32, tyreId: i32, status: i32) -> vcmpError,
    >,
    pub GetVehicleTyreStatus:
        ::std::option::Option<unsafe extern "C" fn(vehicleId: i32, tyreId: i32) -> i32>,
    pub SetVehicleDamageData:
        ::std::option::Option<unsafe extern "C" fn(vehicleId: i32, damageData: u32) -> vcmpError>,
    pub GetVehicleDamageData: ::std::option::Option<unsafe extern "C" fn(vehicleId: i32) -> u32>,
    pub SetVehicleRadio:
        ::std::option::Option<unsafe extern "C" fn(vehicleId: i32, radioId: i32) -> vcmpError>,
    pub GetVehicleRadio: ::std::option::Option<unsafe extern "C" fn(vehicleId: i32) -> i32>,
    pub GetVehicleTurretRotation: ::std::option::Option<
        unsafe extern "C" fn(
            vehicleId: i32,
            horizontalOut: *mut f32,
            verticalOut: *mut f32,
        ) -> vcmpError,
    >,
    pub ResetAllVehicleHandlings: ::std::option::Option<unsafe extern "C" fn()>,
    pub ExistsHandlingRule:
        ::std::option::Option<unsafe extern "C" fn(modelIndex: i32, ruleIndex: i32) -> u8>,
    pub SetHandlingRule: ::std::option::Option<
        unsafe extern "C" fn(modelIndex: i32, ruleIndex: i32, value: f64) -> vcmpError,
    >,
    pub GetHandlingRule:
        ::std::option::Option<unsafe extern "C" fn(modelIndex: i32, ruleIndex: i32) -> f64>,
    pub ResetHandlingRule:
        ::std::option::Option<unsafe extern "C" fn(modelIndex: i32, ruleIndex: i32) -> vcmpError>,
    pub ResetHandling: ::std::option::Option<unsafe extern "C" fn(modelIndex: i32) -> vcmpError>,
    pub ExistsInstHandlingRule:
        ::std::option::Option<unsafe extern "C" fn(vehicleId: i32, ruleIndex: i32) -> u8>,
    pub SetInstHandlingRule: ::std::option::Option<
        unsafe extern "C" fn(vehicleId: i32, ruleIndex: i32, value: f64) -> vcmpError,
    >,
    pub GetInstHandlingRule:
        ::std::option::Option<unsafe extern "C" fn(vehicleId: i32, ruleIndex: i32) -> f64>,
    pub ResetInstHandlingRule:
        ::std::option::Option<unsafe extern "C" fn(vehicleId: i32, ruleIndex: i32) -> vcmpError>,
    pub ResetInstHandling: ::std::option::Option<unsafe extern "C" fn(vehicleId: i32) -> vcmpError>,
    pub CreatePickup: ::std::option::Option<
        unsafe extern "C" fn(
            modelIndex: i32,
            world: i32,
            quantity: i32,
            x: f32,
            y: f32,
            z: f32,
            alpha: i32,
            isAutomatic: u8,
        ) -> i32,
    >,
    pub DeletePickup: ::std::option::Option<unsafe extern "C" fn(pickupId: i32) -> vcmpError>,
    pub IsPickupStreamedForPlayer:
        ::std::option::Option<unsafe extern "C" fn(pickupId: i32, playerId: i32) -> u8>,
    pub SetPickupWorld:
        ::std::option::Option<unsafe extern "C" fn(pickupId: i32, world: i32) -> vcmpError>,
    pub GetPickupWorld: ::std::option::Option<unsafe extern "C" fn(pickupId: i32) -> i32>,
    pub SetPickupAlpha:
        ::std::option::Option<unsafe extern "C" fn(pickupId: i32, alpha: i32) -> vcmpError>,
    pub GetPickupAlpha: ::std::option::Option<unsafe extern "C" fn(pickupId: i32) -> i32>,
    pub SetPickupIsAutomatic:
        ::std::option::Option<unsafe extern "C" fn(pickupId: i32, toggle: u8) -> vcmpError>,
    pub IsPickupAutomatic: ::std::option::Option<unsafe extern "C" fn(pickupId: i32) -> u8>,
    pub SetPickupAutoTimer: ::std::option::Option<
        unsafe extern "C" fn(pickupId: i32, durationMillis: u32) -> vcmpError,
    >,
    pub GetPickupAutoTimer: ::std::option::Option<unsafe extern "C" fn(pickupId: i32) -> u32>,
    pub RefreshPickup: ::std::option::Option<unsafe extern "C" fn(pickupId: i32) -> vcmpError>,
    pub SetPickupPosition: ::std::option::Option<
        unsafe extern "C" fn(pickupId: i32, x: f32, y: f32, z: f32) -> vcmpError,
    >,
    pub GetPickupPosition: ::std::option::Option<
        unsafe extern "C" fn(
            pickupId: i32,
            xOut: *mut f32,
            yOut: *mut f32,
            zOut: *mut f32,
        ) -> vcmpError,
    >,
    pub GetPickupModel: ::std::option::Option<unsafe extern "C" fn(pickupId: i32) -> i32>,
    pub GetPickupQuantity: ::std::option::Option<unsafe extern "C" fn(pickupId: i32) -> i32>,
    pub CreateCheckPoint: ::std::option::Option<
        unsafe extern "C" fn(
            playerId: i32,
            world: i32,
            isSphere: u8,
            x: f32,
            y: f32,
            z: f32,
            red: i32,
            green: i32,
            blue: i32,
            alpha: i32,
            radius: f32,
        ) -> i32,
    >,
    pub DeleteCheckPoint:
        ::std::option::Option<unsafe extern "C" fn(checkPointId: i32) -> vcmpError>,
    pub IsCheckPointStreamedForPlayer:
        ::std::option::Option<unsafe extern "C" fn(checkPointId: i32, playerId: i32) -> u8>,
    pub IsCheckPointSphere: ::std::option::Option<unsafe extern "C" fn(checkPointId: i32) -> u8>,
    pub SetCheckPointWorld:
        ::std::option::Option<unsafe extern "C" fn(checkPointId: i32, world: i32) -> vcmpError>,
    pub GetCheckPointWorld: ::std::option::Option<unsafe extern "C" fn(checkPointId: i32) -> i32>,
    pub SetCheckPointColour: ::std::option::Option<
        unsafe extern "C" fn(
            checkPointId: i32,
            red: i32,
            green: i32,
            blue: i32,
            alpha: i32,
        ) -> vcmpError,
    >,
    pub GetCheckPointColour: ::std::option::Option<
        unsafe extern "C" fn(
            checkPointId: i32,
            redOut: *mut i32,
            greenOut: *mut i32,
            blueOut: *mut i32,
            alphaOut: *mut i32,
        ) -> vcmpError,
    >,
    pub SetCheckPointPosition: ::std::option::Option<
        unsafe extern "C" fn(checkPointId: i32, x: f32, y: f32, z: f32) -> vcmpError,
    >,
    pub GetCheckPointPosition: ::std::option::Option<
        unsafe extern "C" fn(
            checkPointId: i32,
            xOut: *mut f32,
            yOut: *mut f32,
            zOut: *mut f32,
        ) -> vcmpError,
    >,
    pub SetCheckPointRadius:
        ::std::option::Option<unsafe extern "C" fn(checkPointId: i32, radius: f32) -> vcmpError>,
    pub GetCheckPointRadius: ::std::option::Option<unsafe extern "C" fn(checkPointId: i32) -> f32>,
    pub GetCheckPointOwner: ::std::option::Option<unsafe extern "C" fn(checkPointId: i32) -> i32>,
    pub CreateObject: ::std::option::Option<
        unsafe extern "C" fn(
            modelIndex: i32,
            world: i32,
            x: f32,
            y: f32,
            z: f32,
            alpha: i32,
        ) -> i32,
    >,
    pub DeleteObject: ::std::option::Option<unsafe extern "C" fn(objectId: i32) -> vcmpError>,
    pub IsObjectStreamedForPlayer:
        ::std::option::Option<unsafe extern "C" fn(objectId: i32, playerId: i32) -> u8>,
    pub GetObjectModel: ::std::option::Option<unsafe extern "C" fn(objectId: i32) -> i32>,
    pub SetObjectWorld:
        ::std::option::Option<unsafe extern "C" fn(objectId: i32, world: i32) -> vcmpError>,
    pub GetObjectWorld: ::std::option::Option<unsafe extern "C" fn(objectId: i32) -> i32>,
    pub SetObjectAlpha: ::std::option::Option<
        unsafe extern "C" fn(objectId: i32, alpha: i32, duration: u32) -> vcmpError,
    >,
    pub GetObjectAlpha: ::std::option::Option<unsafe extern "C" fn(objectId: i32) -> i32>,
    pub MoveObjectTo: ::std::option::Option<
        unsafe extern "C" fn(objectId: i32, x: f32, y: f32, z: f32, duration: u32) -> vcmpError,
    >,
    pub MoveObjectBy: ::std::option::Option<
        unsafe extern "C" fn(objectId: i32, x: f32, y: f32, z: f32, duration: u32) -> vcmpError,
    >,
    pub SetObjectPosition: ::std::option::Option<
        unsafe extern "C" fn(objectId: i32, x: f32, y: f32, z: f32) -> vcmpError,
    >,
    pub GetObjectPosition: ::std::option::Option<
        unsafe extern "C" fn(
            objectId: i32,
            xOut: *mut f32,
            yOut: *mut f32,
            zOut: *mut f32,
        ) -> vcmpError,
    >,
    pub RotateObjectTo: ::std::option::Option<
        unsafe extern "C" fn(
            objectId: i32,
            x: f32,
            y: f32,
            z: f32,
            w: f32,
            duration: u32,
        ) -> vcmpError,
    >,
    pub RotateObjectToEuler: ::std::option::Option<
        unsafe extern "C" fn(objectId: i32, x: f32, y: f32, z: f32, duration: u32) -> vcmpError,
    >,
    pub RotateObjectBy: ::std::option::Option<
        unsafe extern "C" fn(
            objectId: i32,
            x: f32,
            y: f32,
            z: f32,
            w: f32,
            duration: u32,
        ) -> vcmpError,
    >,
    pub RotateObjectByEuler: ::std::option::Option<
        unsafe extern "C" fn(objectId: i32, x: f32, y: f32, z: f32, duration: u32) -> vcmpError,
    >,
    pub GetObjectRotation: ::std::option::Option<
        unsafe extern "C" fn(
            objectId: i32,
            xOut: *mut f32,
            yOut: *mut f32,
            zOut: *mut f32,
            wOut: *mut f32,
        ) -> vcmpError,
    >,
    pub GetObjectRotationEuler: ::std::option::Option<
        unsafe extern "C" fn(
            objectId: i32,
            xOut: *mut f32,
            yOut: *mut f32,
            zOut: *mut f32,
        ) -> vcmpError,
    >,
    pub SetObjectShotReportEnabled:
        ::std::option::Option<unsafe extern "C" fn(objectId: i32, toggle: u8) -> vcmpError>,
    pub IsObjectShotReportEnabled: ::std::option::Option<unsafe extern "C" fn(objectId: i32) -> u8>,
    pub SetObjectTouchedReportEnabled:
        ::std::option::Option<unsafe extern "C" fn(objectId: i32, toggle: u8) -> vcmpError>,
    pub IsObjectTouchedReportEnabled:
        ::std::option::Option<unsafe extern "C" fn(objectId: i32) -> u8>,
    pub GetPlayerModuleList:
        ::std::option::Option<unsafe extern "C" fn(playerId: i32) -> vcmpError>,
    pub SetPickupOption: ::std::option::Option<
        unsafe extern "C" fn(pickupId: i32, option: vcmpPickupOption, toggle: u8) -> vcmpError,
    >,
    pub GetPickupOption:
        ::std::option::Option<unsafe extern "C" fn(pickupId: i32, option: vcmpPickupOption) -> u8>,
    pub SetFallTimer: ::std::option::Option<unsafe extern "C" fn(timeRate: u16)>,
    pub GetFallTimer: ::std::option::Option<unsafe extern "C" fn() -> u16>,
    pub SetVehicleLightsData:
        ::std::option::Option<unsafe extern "C" fn(vehicleId: i32, lightsData: u32) -> vcmpError>,
    pub GetVehicleLightsData: ::std::option::Option<unsafe extern "C" fn(vehicleId: i32) -> u32>,
    pub KillPlayer: ::std::option::Option<unsafe extern "C" fn(playerId: i32) -> vcmpError>,
    pub SetVehicle3DArrowForPlayer: ::std::option::Option<
        unsafe extern "C" fn(nVehicleId: i32, nTargetPlayerId: i32, bEnabled: u8) -> vcmpError,
    >,
    pub GetVehicle3DArrowForPlayer:
        ::std::option::Option<unsafe extern "C" fn(nVehicleId: i32, nTargetPlayerId: i32) -> u8>,
    pub SetPlayer3DArrowForPlayer: ::std::option::Option<
        unsafe extern "C" fn(nPlayerId: i32, nTargetPlayerId: i32, bEnabled: u8) -> vcmpError,
    >,
    pub GetPlayer3DArrowForPlayer:
        ::std::option::Option<unsafe extern "C" fn(nVehicleId: i32, nTargetPlayerId: i32) -> u8>,
    pub SetPlayerDrunkHandling:
        ::std::option::Option<unsafe extern "C" fn(playerId: i32, drunkLevel: u32) -> vcmpError>,
    pub GetPlayerDrunkHandling: ::std::option::Option<unsafe extern "C" fn(playerId: i32) -> u32>,
    pub SetPlayerDrunkVisuals:
        ::std::option::Option<unsafe extern "C" fn(playerId: i32, drunkLevel: u8) -> vcmpError>,
    pub GetPlayerDrunkVisuals: ::std::option::Option<unsafe extern "C" fn(playerId: i32) -> u8>,
    pub InterpolateCameraLookAt: ::std::option::Option<
        unsafe extern "C" fn(
            playerId: i32,
            lookX: f32,
            lookY: f32,
            lookZ: f32,
            interpTimeMS: u32,
        ) -> vcmpError,
    >,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct PluginCallbacks {
    pub structSize: u32,
    pub OnServerInitialise: ::std::option::Option<unsafe extern "C" fn() -> u8>,
    pub OnServerShutdown: ::std::option::Option<unsafe extern "C" fn()>,
    pub OnServerFrame: ::std::option::Option<unsafe extern "C" fn(elapsedTime: f32)>,
    pub OnPluginCommand: ::std::option::Option<
        unsafe extern "C" fn(commandIdentifier: u32, message: *const ::std::os::raw::c_char) -> u8,
    >,
    pub OnIncomingConnection: ::std::option::Option<
        unsafe extern "C" fn(
            playerName: *mut ::std::os::raw::c_char,
            nameBufferSize: usize,
            userPassword: *const ::std::os::raw::c_char,
            ipAddress: *const ::std::os::raw::c_char,
        ) -> u8,
    >,
    pub OnClientScriptData:
        ::std::option::Option<unsafe extern "C" fn(playerId: i32, data: *const u8, size: usize)>,
    pub OnPlayerConnect: ::std::option::Option<unsafe extern "C" fn(playerId: i32)>,
    pub OnPlayerDisconnect:
        ::std::option::Option<unsafe extern "C" fn(playerId: i32, reason: vcmpDisconnectReason)>,
    pub OnPlayerRequestClass:
        ::std::option::Option<unsafe extern "C" fn(playerId: i32, offset: i32) -> u8>,
    pub OnPlayerRequestSpawn: ::std::option::Option<unsafe extern "C" fn(playerId: i32) -> u8>,
    pub OnPlayerSpawn: ::std::option::Option<unsafe extern "C" fn(playerId: i32)>,
    pub OnPlayerDeath: ::std::option::Option<
        unsafe extern "C" fn(playerId: i32, killerId: i32, reason: i32, bodyPart: vcmpBodyPart),
    >,
    pub OnPlayerUpdate:
        ::std::option::Option<unsafe extern "C" fn(playerId: i32, updateType: vcmpPlayerUpdate)>,
    pub OnPlayerRequestEnterVehicle: ::std::option::Option<
        unsafe extern "C" fn(playerId: i32, vehicleId: i32, slotIndex: i32) -> u8,
    >,
    pub OnPlayerEnterVehicle:
        ::std::option::Option<unsafe extern "C" fn(playerId: i32, vehicleId: i32, slotIndex: i32)>,
    pub OnPlayerExitVehicle:
        ::std::option::Option<unsafe extern "C" fn(playerId: i32, vehicleId: i32)>,
    pub OnPlayerNameChange: ::std::option::Option<
        unsafe extern "C" fn(
            playerId: i32,
            oldName: *const ::std::os::raw::c_char,
            newName: *const ::std::os::raw::c_char,
        ),
    >,
    pub OnPlayerStateChange: ::std::option::Option<
        unsafe extern "C" fn(playerId: i32, oldState: vcmpPlayerState, newState: vcmpPlayerState),
    >,
    pub OnPlayerActionChange:
        ::std::option::Option<unsafe extern "C" fn(playerId: i32, oldAction: i32, newAction: i32)>,
    pub OnPlayerOnFireChange:
        ::std::option::Option<unsafe extern "C" fn(playerId: i32, isOnFire: u8)>,
    pub OnPlayerCrouchChange:
        ::std::option::Option<unsafe extern "C" fn(playerId: i32, isCrouching: u8)>,
    pub OnPlayerGameKeysChange:
        ::std::option::Option<unsafe extern "C" fn(playerId: i32, oldKeys: u32, newKeys: u32)>,
    pub OnPlayerBeginTyping: ::std::option::Option<unsafe extern "C" fn(playerId: i32)>,
    pub OnPlayerEndTyping: ::std::option::Option<unsafe extern "C" fn(playerId: i32)>,
    pub OnPlayerAwayChange: ::std::option::Option<unsafe extern "C" fn(playerId: i32, isAway: u8)>,
    pub OnPlayerMessage: ::std::option::Option<
        unsafe extern "C" fn(playerId: i32, message: *const ::std::os::raw::c_char) -> u8,
    >,
    pub OnPlayerCommand: ::std::option::Option<
        unsafe extern "C" fn(playerId: i32, message: *const ::std::os::raw::c_char) -> u8,
    >,
    pub OnPlayerPrivateMessage: ::std::option::Option<
        unsafe extern "C" fn(
            playerId: i32,
            targetPlayerId: i32,
            message: *const ::std::os::raw::c_char,
        ) -> u8,
    >,
    pub OnPlayerKeyBindDown:
        ::std::option::Option<unsafe extern "C" fn(playerId: i32, bindId: i32)>,
    pub OnPlayerKeyBindUp: ::std::option::Option<unsafe extern "C" fn(playerId: i32, bindId: i32)>,
    pub OnPlayerSpectate:
        ::std::option::Option<unsafe extern "C" fn(playerId: i32, targetPlayerId: i32)>,
    pub OnPlayerCrashReport: ::std::option::Option<
        unsafe extern "C" fn(playerId: i32, report: *const ::std::os::raw::c_char),
    >,
    pub OnVehicleUpdate:
        ::std::option::Option<unsafe extern "C" fn(vehicleId: i32, updateType: vcmpVehicleUpdate)>,
    pub OnVehicleExplode: ::std::option::Option<unsafe extern "C" fn(vehicleId: i32)>,
    pub OnVehicleRespawn: ::std::option::Option<unsafe extern "C" fn(vehicleId: i32)>,
    pub OnObjectShot:
        ::std::option::Option<unsafe extern "C" fn(objectId: i32, playerId: i32, weaponId: i32)>,
    pub OnObjectTouched: ::std::option::Option<unsafe extern "C" fn(objectId: i32, playerId: i32)>,
    pub OnPickupPickAttempt:
        ::std::option::Option<unsafe extern "C" fn(pickupId: i32, playerId: i32) -> u8>,
    pub OnPickupPicked: ::std::option::Option<unsafe extern "C" fn(pickupId: i32, playerId: i32)>,
    pub OnPickupRespawn: ::std::option::Option<unsafe extern "C" fn(pickupId: i32)>,
    pub OnCheckpointEntered:
        ::std::option::Option<unsafe extern "C" fn(checkPointId: i32, playerId: i32)>,
    pub OnCheckpointExited:
        ::std::option::Option<unsafe extern "C" fn(checkPointId: i32, playerId: i32)>,
    pub OnEntityPoolChange: ::std::option::Option<
        unsafe extern "C" fn(entityType: vcmpEntityPool, entityId: i32, isDeleted: u8),
    >,
    pub OnServerPerformanceReport: ::std::option::Option<
        unsafe extern "C" fn(
            entryCount: usize,
            descriptions: *mut *const ::std::os::raw::c_char,
            times: *mut u64,
        ),
    >,
    pub OnPlayerModuleList: ::std::option::Option<
        unsafe extern "C" fn(playerId: i32, list: *const ::std::os::raw::c_char),
    >,
}
