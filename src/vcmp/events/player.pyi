from typing import Optional

from vcmp.streams import ReadStream
from vcmp.types import Vector
from vcmp.functions.player import Player
from vcmp.functions.vehicle import Vehicle
from vcmp.functions.keybind import KeyBind
from .abc import Event


class PlayerEvent(Event):
    def __init__(self, name: str) -> None: ...

class IncomingConnectionEvent(PlayerEvent):
    def __init__(self, player_name: str, password: str, ip: str) -> None: ...

class PlayerConnectEvent(PlayerEvent):
    def __init__(self, player_id: int) -> None: ...

    @property
    def player(self) -> Player: ...

class PlayerDisconnectEvent(PlayerEvent):
    def __init__(self, player_id: int, reason: int) -> None: ...

    @property
    def player(self) -> Player: ...

    @property
    def reason(self) -> int: ...

class ClientScriptDataEvent(PlayerEvent):
    def __init__(self, player_id: int, data: bytes) -> None: ...

    @property
    def player(self) -> Player: ...

    @property
    def stream(self) -> ReadStream: ...

class PlayerRequestClassEvent(PlayerEvent):
    def __init__(self, player_id: int, class_id: int) -> None: ...

    @property
    def player(self) -> Player: ...

class PlayerRequestSpawnEvent(PlayerEvent):
    def __init__(self, player_id: int) -> None: ...

    @property
    def player(self) -> Player: ...

class PlayerSpawnEvent(PlayerEvent):
    def __init__(self, player_id: int) -> None: ...

    @property
    def player(self) -> Player: ...

class PlayerDeathEvent(PlayerEvent):
    def __init__(self, player_id: int, killer_id: int, reason: int, body_part: int) -> None: ...

    @property
    def player(self) -> Player: ...

    @property
    def killer(self) -> Optional[Player]: ...

    @property
    def reason(self) -> int: ...

    @property
    def body_part(self) -> int: ...

class PlayerHealthEvent(PlayerEvent):
    def __init__(self, player_id: int, old_health: float, new_health: float) -> None: ...

    @property
    def player(self) -> Player: ...

    @property
    def old_health(self) -> float: ...

    @property
    def new_health(self) -> float: ...

    @new_health.setter
    def new_health(self, new_health: float) -> None: ...

class PlayerArmourEvent(PlayerEvent):
    def __init__(self, player_id: int, old_armour: float, new_armour: float) -> None: ...

    @property
    def player(self) -> Player: ...

    @property
    def old_armour(self) -> float: ...

    @property
    def new_armour(self) -> float: ...

    @new_armour.setter
    def new_armour(self, new_armour: float) -> None: ...

class PlayerAmmoEvent(PlayerEvent):
    def __init__(self, player_id: int, old_ammo: int, new_ammo: int) -> None: ...

    @property
    def player(self) -> Player: ...

    @property
    def old_ammo(self) -> int: ...

    @property
    def new_ammo(self) -> int: ...

    @new_ammo.setter
    def new_ammo(self, new_ammo: int) -> None: ...

class PlayerWeaponEvent(PlayerEvent):
    def __init__(self, player_id: int, old_weapon: int, new_weapon: int) -> None: ...

    @property
    def player(self) -> Player: ...

    @property
    def old_weapon(self) -> int: ...

    @property
    def new_weapon(self) -> int: ...

    @new_weapon.setter
    def new_weapon(self, new_weapon: int) -> None: ...

class PlayerMoveEvent(PlayerEvent):
    def __init__(self, player_id: int, old_position: Vector, new_position: Vector) -> None: ...

    @property
    def player(self) -> Player: ...

    @property
    def old_position(self) -> Vector: ...

    @property
    def new_position(self) -> Vector: ...

    @new_position.setter
    def new_position(self, new_position: Vector) -> None: ...

class PlayerRequestEnterVehicleEvent(PlayerEvent):
    def __init__(self, player_id: int, vehicle_id: int) -> None: ...

    @property
    def player(self) -> Player: ...

    @property
    def vehicle(self) -> Vehicle: ...

class PlayerEnterVehicleEvent(PlayerEvent):
    def __init__(self, player_id: int, vehicle_id: int) -> None: ...

    @property
    def player(self) -> Player: ...

    @property
    def vehicle(self) -> Vehicle: ...

class PlayerExitVehicleEvent(PlayerEvent):
    def __init__(self, player_id: int, vehicle_id: int) -> None: ...

    @property
    def player(self) -> Player: ...

    @property
    def vehicle(self) -> Vehicle: ...

class PlayerNameChangeEvent(PlayerEvent):
    def __init__(self, player_id: int, old_name: str, new_name: str) -> None: ...

    @property
    def player(self) -> Player: ...

    @property
    def old_name(self) -> str: ...

    @property
    def new_name(self) -> str: ...

class PlayerStateChangeEvent(PlayerEvent):
    def __init__(self, player_id: int, old_state: int, new_state: int) -> None: ...

    @property
    def player(self) -> Player: ...

    @property
    def old_state(self) -> int: ...

    @property
    def new_state(self) -> int: ...

class PlayerActionChangeEvent(PlayerEvent):
    def __init__(self, player_id: int, old_action: int, new_action: int) -> None: ...

    @property
    def player(self) -> Player: ...

    @property
    def old_action(self) -> int: ...

    @property
    def new_action(self) -> int: ...

class PlayerOnFireChangeEvent(PlayerEvent):
    def __init__(self, player_id: int, is_on_fire: bool) -> None: ...

    @property
    def player(self) -> Player: ...

    @property
    def is_on_fire(self) -> bool: ...

class PlayerCrouchChangeEvent(PlayerEvent):
    def __init__(self, player_id: int, is_crouching: bool) -> None: ...

    @property
    def player(self) -> Player: ...

    @property
    def is_crouching(self) -> bool: ...

class PlayerGameKeysChangeEvent(PlayerEvent):
    def __init__(self, player_id: int, old_keys: int, new_keys: int) -> None: ...

    @property
    def player(self) -> Player: ...

    @property
    def old_keys(self) -> int: ...

    @property
    def new_keys(self) -> int: ...

class PlayerBeginTypingEvent(PlayerEvent):
    def __init__(self, player_id: int) -> None: ...

    @property
    def player(self) -> Player: ...

class PlayerEndTypingEvent(PlayerEvent):
    def __init__(self, player_id: int) -> None: ...

    @property
    def player(self) -> Player: ...

class PlayerAwayChangeEvent(PlayerEvent):
    def __init__(self, player_id: int, is_away: bool) -> None: ...

    @property
    def player(self) -> Player: ...

    @property
    def is_away(self) -> bool: ...

class PlayerMessageEvent(PlayerEvent):
    def __init__(self, player_id: int, message: str) -> None: ...

    @property
    def player(self) -> Player: ...

    @property
    def message(self) -> str: ...

class PlayerCommandEvent(PlayerEvent):
    def __init__(self, player_id: int, command: str, text: str) -> None: ...

    @property
    def player(self) -> Player: ...

    @property
    def command(self) -> str: ...

    @property
    def text(self) -> str: ...

    @property
    def args(self) -> list[str]: ...

class PlayerPrivateMessageEvent(PlayerEvent):
    def __init__(self, player_id: int, target_id: int, message: str) -> None: ...

    @property
    def player(self) -> Player: ...

    @property
    def target(self) -> Player: ...

    @property
    def message(self) -> str: ...

class PlayerKeyBindDownEvent(PlayerEvent):
    def __init__(self, player_id: int, bind_id: int) -> None: ...

    @property
    def player(self) -> Player: ...

    @property
    def key(self) -> KeyBind: ...

class PlayerKeyBindUpEvent(PlayerEvent):
    def __init__(self, player_id: int, bind_id: int) -> None: ...

    @property
    def player(self) -> Player: ...

    @property
    def key(self) -> KeyBind: ...

class PlayerSpectateEvent(PlayerEvent):
    def __init__(self, player_id: int, target_id: int) -> None: ...

    @property
    def player(self) -> Player: ...

    @property
    def target(self) -> Optional[Player]: ...

class PlayerCrashReportEvent(PlayerEvent):
    def __init__(self, player_id: int, report: str) -> None: ...

    @property
    def player(self) -> Player: ...

    @property
    def report(self) -> str: ...